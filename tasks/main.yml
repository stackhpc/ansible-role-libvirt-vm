---
- name: Gather os specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_facts.distribution }}-{{ ansible_facts.distribution_major_version }}.yml"
        - "{{ ansible_facts.distribution }}.yml"
        - "{{ ansible_facts.os_family }}.yml"
  tags: vars

- ansible.builtin.include_tasks: autodetect.yml
  # We don't need to know the engine and emulator if we're not creating any new
  # VMs.
  when: >-
    (libvirt_vms | selectattr('state', 'defined')
       | selectattr('state', 'equalto', 'absent') | list) != libvirt_vms

# Libvirt requires qemu-img to create qcow2 files.
- name: Ensure qemu-img is installed
  ansible.builtin.package:
    name: "{{ 'qemu-img' if ansible_facts.os_family == 'RedHat' else 'qemu-utils' }}"
    update_cache: "{{ True if ansible_facts.pkg_mgr == 'apt' else omit }}"
  become: true

- ansible.builtin.include_tasks: volumes.yml
  vars:
    volumes: "{{ vm.volumes | default([], true) }}"
  with_items: "{{ libvirt_vms }}"
  loop_control:
    loop_var: vm
  when: (vm.state | default('present', true)) == 'present'

- ansible.builtin.include_tasks: vm.yml
  vars:
    console_log_enabled: "{{ vm.console_log_enabled | default(false) }}"
    console_log_path: >-
      {{ vm.console_log_path |
         default(libvirt_vm_default_console_log_dir + '/' +  vm.name + '-console.log', true) }}
    machine_default: "{{ none if libvirt_vm_engine == 'kvm' else 'pc' }}"
    machine: "{{ vm.machine | default(machine_default, true) }}"
    cpu_mode: "{{ vm.cpu_mode | default(libvirt_cpu_mode_default) }}"
    volumes: "{{ vm.volumes | default([], true) }}"
    interfaces: "{{ vm.interfaces | default([], true) }}"
    start: "{{ vm.start | default(true) }}"
    autostart: "{{ vm.autostart | default(true) }}"
    enable_vnc: "{{ vm.enable_vnc | default(false) }}"
    enable_spice: "{{ vm.enable_spice | default(false) }}"
    boot_firmware: "{{ vm.boot_firmware | default('bios', true) | lower }}"
  with_items: "{{ libvirt_vms }}"
  loop_control:
    loop_var: vm
  when: (vm.state | default('present', true)) == 'present'

- ansible.builtin.include_tasks: destroy-vm.yml
  vars:
    boot_firmware: "{{ vm.boot_firmware | default('bios', true) | lower }}"
  with_items: "{{ libvirt_vms }}"
  loop_control:
    loop_var: vm
  when: (vm.state | default('present', true)) == 'absent'

- ansible.builtin.include_tasks: destroy-volumes.yml
  vars:
    volumes: "{{ vm.volumes | default([], true) }}"
  with_items: "{{ libvirt_vms }}"
  loop_control:
    loop_var: vm
  when: (vm.state | default('present', true)) == 'absent'

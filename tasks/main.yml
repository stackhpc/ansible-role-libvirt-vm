---

- include_tasks: volumes.yml
  vars:
    volumes: "{{ vm.volumes | default([], true) }}"
  with_items: "{{ libvirt_vms }}"
  loop_control:
    loop_var: vm
  when: (vm.state | default('present', true)) == 'present'

- include_tasks: vm.yml
  vars:
    console_log_enabled: "{{ vm.console_log_enabled | default(false) }}"
    console_log_path: "{{ vm.console_log_path | default(libvirt_vm_default_console_log_dir + '/' +  vm.name + '-console.log', true) }}"
    machine_default: >-
      {%- if boot_firmware == 'efi' -%}
      q35
      {%- elif libvirt_vm_engine == 'kvm' -%}
      none
      {%- else -%}
      pc
      {%- endif -%}
    machine: "{{ vm.machine | default(machine_default, true) }}"
    cpu_mode_default: "{{ 'host-passthrough' if libvirt_vm_engine == 'kvm' else 'host-model' }}"
    cpu_mode: "{{ vm.cpu_mode | default(cpu_mode_default, true) }}"
    volumes: "{{ vm.volumes | default([], true) }}"
    interfaces: "{{ vm.interfaces | default([], true) }}"
    start: "{{ vm.start | default(true) }}"
    autostart: "{{ vm.autostart | default(true) }}"
    boot_firmware: "{{ vm.boot_firmware | default('bios', true) | lower }}"
    enable_feature_acpi_default: "{{ true if boot_firmware == 'efi' else false }}"
    enable_feature_acpi: "{{ vm.enable_feature_acpi | default(enable_feature_acpi_default, true) }}"
    enable_feature_smm_default: "{{ enable_secure_boot }}"
    enable_feature_smm: "{{ vm.enable_feature_smm | default(enable_feature_smm_default, true) }}"
    enable_secure_boot: "{{ vm.enable_secure_boot | default(false, true) | bool }}"
  with_items: "{{ libvirt_vms }}"
  loop_control:
    loop_var: vm
  when: (vm.state | default('present', true)) == 'present'

- include_tasks: destroy-volumes.yml
  vars:
    volumes: "{{ vm.volumes | default([], true) }}"
  with_items: "{{ libvirt_vms }}"
  loop_control:
    loop_var: vm
  when: (vm.state | default('present', true)) == 'absent'

- include_tasks: destroy-vm.yml
  vars:
    boot_firmware: "{{ vm.boot_firmware | default('bios', true) | lower }}"
  with_items: "{{ libvirt_vms }}"
  loop_control:
    loop_var: vm
  when: (vm.state | default('present', true)) == 'absent'

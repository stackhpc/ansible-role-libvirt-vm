---
- name: Ensure remote images are downloaded
  ansible.builtin.get_url:
    url: "{{ item.image }}"
    dest: "{{ libvirt_vm_image_cache_path }}/{{ item.image | basename }}"
    checksum: "{{ item.checksum | default(omit) }}"
  with_items: "{{ volumes | selectattr('image', 'defined') | list }}"
  when: "'http' in item.image"

- name: Ensure local images are copied
  ansible.builtin.copy:
    src: "{{ item.image }}"
    dest: "{{ libvirt_vm_image_cache_path }}/{{ item.image | basename }}"
    checksum: "{{ item.checksum | default(omit) }}"
    remote_src: "{{ item.remote_src | default(true) | bool }}"
  with_items: "{{ volumes | selectattr('image', 'defined') | list }}"
  when: "'http' not in item.image"

- name: Ensure the VM disk volumes exist
  ansible.builtin.script: >
    virt_volume.sh
    -n {{ item.name }}
    -p {{ item.pool |default('default') }}
    -c {{ item.capacity }}
    -f {{ item.format | default(libvirt_volume_default_format) }}
    {% if item.image is defined %}
    -i {{ libvirt_vm_image_cache_path }}/{{ item.image | basename }}
    {% elif item.backing_image is defined %}
    -b {{ item.backing_image }}
    {% endif %}
    -a {{ ansible_check_mode }}
  with_items: "{{ volumes }}"
  when: item.type | default(libvirt_volume_default_type) == 'volume'
  environment: "{{ libvirt_vm_script_env }}"
  register: volume_result
  changed_when:
    - volume_result is success
    - (volume_result.stdout | from_json).changed | default(True)
  check_mode: False
  become: true

- name: Ensure the VM network volumes exist
  ansible.builtin.command: qemu-img create -f {{ item.source.protocol }} {{ item.source.protocol }}:{{ item.source.name }} {{ item.capacity }}
  with_items: "{{ volumes }}"
  when: item.type | default(libvirt_volume_default_type) == 'network'
  register: volume_result_network
  # 0 is OK, 1 is an existing image
  failed_when: volume_result_network.rc >= 2
  changed_when:
    - volume_result_network is success
    - volume_result_network.rc == 1
  check_mode: False
  become: true
